steps:

  # pull last image to benifit from cache
  - name: 'gcr.io/cloud-builders/docker'
    id: 'load-cached-images'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      docker pull gcr.io/$PROJECT_ID/blog-api:latest || exit 0

  # Docker build, but target test
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-for-test'
    args: [
        'build',
        '-f', './Dockerfile',
        '-t', 'gcr.io/$PROJECT_ID/blog-api-test:$COMMIT_SHA',
        '--target', 'test',
        '--cache-from', 'gcr.io/$PROJECT_ID/blog-api:latest',
        '.'
    ]

  # Docker build production image, using test image as cache
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-for-prod'
    waitFor: ['build-for-test']
    args: [
        'build',
        '-f', './Dockerfile',
        '-t', 'gcr.io/$PROJECT_ID/blog-api:$COMMIT_SHA',
        '--cache-from', 'gcr.io/$PROJECT_ID/blog-api-test:$COMMIT_SHA',
        '.'
    ]

  - name: 'gcr.io/cloud-builders/docker'
    id: 'lint'
    waitFor: ['build-for-test']
    args: [
    'run', 'gcr.io/$PROJECT_ID/blog-api-test:$COMMIT_SHA', 'npm', 'run', 'lint'
    ]

  - name: 'gcr.io/cloud-builders/docker'
    id: 'test'
    waitFor: ['build-for-test']
    args: [
    'run', 'gcr.io/$PROJECT_ID/blog-api-test:$COMMIT_SHA', 'npm', 'test'
    ]

# push the created image with the following tags
tags: ['latest', '$COMMIT_SHA']
images: ['gcr.io/$PROJECT_ID/blog-api']
